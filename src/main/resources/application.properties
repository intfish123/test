server.port=8080

logging.config=classpath:log4j2.xml
#\u7EBF\u7A0B\u6C60
async.executor.thread.core_pool_size= 30
async.executor.thread.max_pool_size= 40
async.executor.thread.queue_capacity= 3000
async.executor.thread.keep_alive_seconds= 300

spring.jackson.date-format = yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone= GMT+8
spring.jackson.serialization.write-dates-as-timestamps=false

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://172.16.17.247:3306/pandora?useUnicode=true&useSSL=false&characterEncoding=utf8
spring.datasource.username=root
spring.datasource.password=keLnb89!
# \u521D\u59CB\u5316\u7269\u7406\u8FDE\u63A5\u4E2A\u6570
spring.datasource.druid.initial-size=2
# \u6700\u5927\u8FDE\u63A5\u6C60\u6570\u91CF
spring.datasource.druid.max-active=50
# \u6700\u5C0F\u8FDE\u63A5\u6C60\u6570\u91CF
spring.datasource.druid.min-idle=5
# \u83B7\u53D6\u8FDE\u63A5\u65F6\u6700\u5927\u7B49\u5F85\u65F6\u95F4(ms)
spring.datasource.druid.max-wait=120000
# \u5F00\u542F\u7F13\u5B58preparedStatement(PSCache)
spring.datasource.druid.pool-prepared-statements=true
# \u542F\u7528PSCache\u540E\uFF0C\u6307\u5B9A\u6BCF\u4E2A\u8FDE\u63A5\u4E0APSCache\u7684\u5927\u5C0F
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
# \u7528\u6765\u68C0\u6D4B\u8FDE\u63A5\u662F\u5426\u6709\u6548\u7684sql
spring.datasource.druid.validation-query=select 1
# \u7533\u8BF7\u8FDE\u63A5\u65F6\u4E0D\u68C0\u6D4B\u8FDE\u63A5\u662F\u5426\u6709\u6548
spring.datasource.druid.test-on-borrow=false
# \u5F52\u8FD8\u8FDE\u63A5\u65F6\u4E0D\u68C0\u6D4B\u8FDE\u63A5\u662F\u5426\u6709\u6548
spring.datasource.druid.test-on-return=false
# \u7533\u8BF7\u8FDE\u63A5\u65F6\u68C0\u6D4B\uFF0C\u5982\u679C\u7A7A\u95F2\u65F6\u95F4\u5927\u4E8EtimeBetweenEvictionRunsMillis\uFF0C\u6267\u884CvalidationQuery\u68C0\u6D4B\u8FDE\u63A5\u662F\u5426\u6709\u6548\uFF08\u4E0D\u5F71\u54CD\u6027\u80FD\uFF09
spring.datasource.druid.test-while-idle=true
# \u68C0\u6D4B\u8FDE\u63A5\u7684\u95F4\u9694\u65F6\u95F4\uFF0C\u82E5\u8FDE\u63A5\u7A7A\u95F2\u65F6\u95F4 >= minEvictableIdleTimeMillis\uFF0C\u5219\u5173\u95ED\u7269\u7406\u8FDE\u63A5
spring.datasource.druid.time-between-eviction-runs-millis=60000
# \u8FDE\u63A5\u4FDD\u6301\u7A7A\u95F2\u800C\u4E0D\u88AB\u9A71\u9010\u7684\u6700\u5C0F\u65F6\u95F4(ms)
spring.datasource.druid.min-evictable-idle-time-millis=300000
# \u914D\u7F6E\u76D1\u63A7\u7EDF\u8BA1\u62E6\u622A\u7684filters\uFF08\u4E0D\u914D\u7F6E\u5219\u76D1\u63A7\u754C\u9762sql\u65E0\u6CD5\u7EDF\u8BA1\uFF09\uFF0C\u76D1\u63A7\u7EDF\u8BA1filter:stat\uFF0C\u65E5\u5FD7filter:log4j\uFF0C\u9632\u5FA1sql\u6CE8\u5165filter:wall
spring.datasource.druid.filters=stat,log4j,wall
# \u652F\u6301\u5408\u5E76\u591A\u4E2ADruidDataSource\u7684\u76D1\u63A7\u6570\u636E
spring.datasource.druid.use-global-data-source-stat=true
# \u901A\u8FC7connectProperties\u5C5E\u6027\u6765\u6253\u5F00mergeSql(Sql\u5408\u5E76)\u529F\u80FD\uFF1B\u6162SQL\u8BB0\u5F55(\u914D\u7F6E\u8D85\u8FC75\u79D2\u5C31\u662F\u6162\uFF0C\u9ED8\u8BA4\u662F3\u79D2)
spring.datasource.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000



#  address: jdbc:clickhouse://172.16.16.180:8123
clickhouse.proxyWithCacheAddress= jdbc:clickhouse://172.16.16.180:11101
clickhouse.proxyNoCacheAddress= jdbc:clickhouse://172.16.16.180:11102
clickhouse.username= ck
clickhouse.no_cache_username= ck_no_cache
clickhouse.password= eYUtkVR7
clickhouse.socketTimeout= 600000
clickhouse.distribute.db= DBService
clickhouse.distribute.CKLogsTable= DBService.distribute_log_ck_logs
clickhouse.distribute.cohortTempTable= DBService.distribute_user_clustering_tmp
clickhouse.distribute.cohortStableTable= DBService.distribute_user_clustering_stable
clickhouse.distribute.cohortScheduleTable= DBService.distribute_user_clustering_schedule
clickhouse.distribute.cohortView= distribute_user_clustering